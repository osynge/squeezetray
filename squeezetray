#!/usr/bin/python
import sys
from sqtray.wxMainApp import  mainApp
import optparse

import logging
import logging.config
from sqtray.__version__ import version
import os
import wx
from sqtray.wxArtSvg import MyArtProvider,getProgramFolder,directoryArray

def checkEnviromentLinuxUbuntuWhiteList():
    log = logging.getLogger("checkEnviromentLinuxUbuntuWhiteList")
    try:
        from gi.repository import Gio,GLib
    except:
        log.warning("Could not import 'gi.repository', no gconf functionality.")
        return None
    allschenamas = Gio.Settings.list_schemas()
    if 'com.canonical.Unity.Panel' in allschenamas:
        gsettings = Gio.Settings.new('com.canonical.Unity.Panel')
        systrayWhiteListVariant = gsettings.get_value('systray-whitelist')
        if "Python" in systrayWhiteListVariant:
            log.info("Python is whitelisted in system tray.")
            return
        if "All" in systrayWhiteListVariant:
            log.info("All items are whitelisted in system tray.")
            return
        systrayWhiteList = []
        for item in range(0 ,len(systrayWhiteListVariant)):
            itemValue =  str(systrayWhiteListVariant[item])
            systrayWhiteList.append(itemValue)
        
        systrayWhiteList.append("Python")
        variant = GLib.Variant.new_strv(systrayWhiteList)
        gsettings.set_value('systray-whitelist',variant)
        log.warning("whitelisted for system tray now includes Python.")
def checkEnviromentLinux():
    checkEnviromentLinuxUbuntuWhiteList()


def checkEnviroment():
    if sys.platform.startswith('linux'):
        # Linux-specific code here...
        checkEnviromentLinux()



def main():
    p = optparse.OptionParser(version = "%prog " + version)
    p.add_option('--verbose', action ='count',help='Change global log level, increasing log output.', metavar='LOGFILE')
    p.add_option('--quiet', action ='count',help='Change global log level, decreasing log output.', metavar='LOGFILE')
    p.add_option('--log-config', action ='store',help='Logfile configuration file, (overrides command line).', metavar='LOGFILE')
    options, arguments = p.parse_args()
    # Set up log file
    LoggingLevel = logging.WARNING
    LoggingLevelCounter = 2
    if options.verbose:
        LoggingLevelCounter = LoggingLevelCounter - options.verbose
        if options.verbose == 1:
            LoggingLevel = logging.INFO
        if options.verbose == 2:
            LoggingLevel = logging.DEBUG
    if options.quiet:
        LoggingLevelCounter = LoggingLevelCounter + options.quiet
    if LoggingLevelCounter <= 0:
        LoggingLevel = logging.DEBUG
    if LoggingLevelCounter == 1:
        LoggingLevel = logging.INFO
    if LoggingLevelCounter == 2:
        LoggingLevel = logging.WARNING
    if LoggingLevelCounter == 3:
        LoggingLevel = logging.ERROR
    if LoggingLevelCounter == 4:
        LoggingLevel = logging.FATAL
    if LoggingLevelCounter >= 5:
        LoggingLevel = logging.CRITICAL
    
    if options.log_config:
        logFile = options.log_config
        if os.path.isfile(str(options.log_config)):
            logging.config.fileConfig(options.log_config)
        else:
            logging.basicConfig(level=LoggingLevel)
            log = logging.getLogger("main")
            log.error("Logfile configuration file '%s' was not found." % (options.log_config))
            sys.exit(1)
    else:
        
        logging.basicConfig(level=LoggingLevel)
    log = logging.getLogger("main")
    # Now logging is set up process other options

    checkEnviroment()
    app = mainApp()
    da = directoryArray()
    #print __file__
    iconfolders = [getProgramFolder(),"icons","/usr/share/pixmaps/SqueezeWxTray"]
    da.path = iconfolders
    da.checkPathsExist()
    ArtProvider = MyArtProvider() 
    wx.ArtProvider.Push(ArtProvider)
    app.InitUI()
    app.MainLoop()

if __name__ == '__main__':
    main()
